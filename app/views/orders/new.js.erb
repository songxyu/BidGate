

$(".content_area").html("<%= escape_javascript render(:partial => 'orders/new_2') %>");


  // use jquery datepicker for some date fields
  var dateCtrolsSel = "#order_deadline, .date-input";
  $(dateCtrolsSel).datepicker();
  $(dateCtrolsSel).datepicker('option', 'dateFormat', 'yy-m-dd');
  

var $step1Area = $('.order_onboarding');
// next button status handle
var checkSelectStatus = function(){
	var $nextBtn = $step1Area.find(".next_btn");
	if(isCate && isBid && isLocation){
		console.log('all selected, enable next button!');
		//$nextBtn.attr("disabled", ""); // not work
		$nextBtn.prop("disabled", false);
		$nextBtn.removeClass("disabled");
	} else {
		$nextBtn.prop("disabled", "disabled");
		$nextBtn.addClass("disabled");
	}
};


// ********  select button actions ******** 
// select collection
var selection = {
	category:"",
	bid:"",
	location:""
};

var isCate = false;
var isBid = false;
var isLocation = false;

var $cate_buttons = $step1Area.find(".category_select .select_btn");
$cate_buttons.click(function(){
	var isSelected = $(this).hasClass("selected");
	$cate_buttons.removeClass("selected");
	if(!isSelected){
		$(this).addClass("selected");
		isCate = true;
		selection.category = $(this).attr("data-name");
		console.log(selection.category + ", " + selection.bid + ", " + selection.location);
	} else {
		isCate = false;
		selection.category = "";
	}
	checkSelectStatus();
});


var $bid_buttons = $step1Area.find(".bid_select .select_btn");
$bid_buttons.click(function(){
	var isSelected = $(this).hasClass("selected");
	$bid_buttons.removeClass("selected");
	if(!isSelected){
		$(this).addClass("selected");
		isBid = true;
		selection.bid = $(this).attr("data-name");
	} else {
		isBid = false;
		selection.bid = "";
	}
	checkSelectStatus();
});

// other dropdown actions
var $dropdownContainer = $step1Area.find(".category_select .dropdown_container");
var $dropdownList = $step1Area.find(".category_select .dropdown_list");
var $item = $step1Area.find(".category_select .item");
$dropdownList.addClass("hidden");

$dropdownContainer.click(function(){
	var isHidden = $dropdownList.hasClass("hidden");
	if(isHidden){
		$dropdownList.removeClass("hidden");
	}else {
		$dropdownList.addClass("hidden");
	}
});

$dropdownContainer.focusout(function(){
	$dropdownList.addClass("hidden");
});

$item.click(function(){
	$dropdownList.addClass("hidden");
	$step1Area.find(".dropdown_container .dropdown_btn_text").html($(this).attr("data-item"));
});

// end dropdown



var $city = $step1Area.find(".city_input");
$city.keyup(function(){
	var cityInput = $(this).val();
	if(cityInput != ""){
		isLocation = true;
		selection.location = cityInput;
	} else {
		isLocation = false;
		selection.location = "";
	}
	checkSelectStatus();
});
 
var $otherSelections = $step1Area.find(".other_select_dropdown");
$otherSelections.click(function(){
	$(this).addClass("dropdown_show");
});


// handle steps displays
var $step2Area = $('.create_order_step2');
var gCategoryChanged = true;
var categoryDynamicPropPrefix = 'category-dynamic-prop-';

var common_properties = [   // OrderGoodsHelper.get_common_properties
      {id: "name", name: "货物"}, {id: "model", name: "型号"}, {id: "location", name: "产地"},
      {id: "quantity", name: "数量"}, {id: "memo", name: "描述"}, {id: "operation", name: "操作"} 
    ];

var category_dynamic_properties = [];

// can be used to get unit of sub category if needs
var fnLoadCategoryUnit = function(categoryId){
	// load category unit for quantity field
	$.ajax({
		url : '/category_unit',
		type : 'get',
		dataType: 'text',  
		data : {
			'category_id' : categoryId
		}
	}).done(function(data) {
		console.log('category id= '+categoryId+', unit= '+data);
		$step2Area.find('.category-unit').text(data);		 
	}).fail(function(jqXHR, textStatus) {
		console.log("Request failed: " + JSON.stringify(textStatus));
	});	
};


var fnGetOpCellIndex = function(){
	var idx = common_properties.length + category_dynamic_properties.length -1 ;
	console.log('get op cell index = '+idx);
	return idx; 
};

var $nextStepBtn = $step1Area.find('.next_btn');

$nextStepBtn.unbind('click');
$nextStepBtn.click(function(){
	// use the var selection	 
	var categoryId = $step1Area.find(".category_select .select_btn.selected").attr('data-type-id');
	var city = $step1Area.find('.city_select .city_input').val();
	var bidType = $step1Area.find('.bid_select .selected').attr('data-type-id');   
	console.log('categoryId='+categoryId+', city='+city+', bidType='+bidType);
		
	// load sub category list
	$.ajax({
		url : '/category_list',
		type : 'get',
		dataType: 'html', // response selection list
		data : {
			'category_id' : categoryId
		}
	}).done(function(data) {
		console.log(data);
		$step2Area.find('.item-field-area .category_dropdown_list').html(data);		 
	}).fail(function(jqXHR, textStatus) {
		console.log("Request failed: " + JSON.stringify(textStatus));
	});
	
	fnLoadCategoryUnit(categoryId);
	
	// load dynamic fields for the level1 category
	$.ajax({
		url : '/props_by_category', //Note the my_controller and action here, i.e. change accordingly
		type : 'get',
		dataType: 'html', // response html snipt
		data : {
			'category_id' : categoryId
		}
	}).done(function(data) {
		 var $dynFiledArea = $step2Area.find('.dynamic-select-area .dynamic_properties');
		 $dynFiledArea.html(data);	
		 
		 category_dynamic_properties = [];
		 var $dynFileds = $dynFiledArea.find('.item-field-area'); 
		 $dynFileds.each(function(idx, dynField){
		 	var $fieldDom = $(dynField);
		 	var propId = $fieldDom.find('.category-dynamic-prop').data('categorydynamicprop');
		 	var propName = $fieldDom.find('.prop-name').text();
		 	console.log(' propId='+propId+', propName='+propName); 
		 	
		 	category_dynamic_properties.push({id: categoryDynamicPropPrefix + propId, name: propName});
		 	gCategoryChanged = true;
		 });
		 
	}).fail(function(jqXHR, textStatus) {
		console.log("Request failed: " + JSON.stringify(textStatus));
	});
	
	
	var $orderVendorListArea = $step2Area.find('.order-vendor-area');
	if(bidType == 2){
		addVendorsGrid();
		$orderVendorListArea.show();
	}else{
		$orderVendorListArea.hide();
	}
	
	//fnResetOrderItemGrid();// TODO:	
	addOrderItems();
	
	$step2Area.show();
});

//****************** end of step1 page actions *******************


var fnShowRightArea = function(rightDivClass){
	$step2Area.find('.dynamic-select-area').hide();
	$step2Area.find('.vendor-select-area').hide();
	$step2Area.find('.empty-info').hide();
	$step2Area.find('.'+rightDivClass).show();
};

var data4DelBtn = "删除";

// ***** usage sample for editable Slickgrid *****
var gridInfo4OrderItems = {
	columns: common_properties, 
	options: {
		editable: true,
	    enableAddRow: true,
	    enableCellNavigation: true,
	    asyncEditorLoading: false,
	    autoEdit: false
	},
	dataView: null	
};


function requiredFieldValidator(value) {
    if (value == null || value == undefined || !value.length) {
      return {valid: false, msg: "This is a required field"};
    } else {
      return {valid: true, msg: null};
    }
}

var itemGridTotalWidth = 770;
 
var getColumnDefinition = function(columnData, gridTotalWidth ){
	  var columns =  columnData ? columnData : gridInfo4OrderItems.columns;   
	  var columnCount = columnData ? columnData.length : gridInfo4OrderItems.columns.length ;
	  var colWidth = gridTotalWidth/columnCount;
	  
	  console.log('columnCount='+columnCount+', colWidth='+colWidth);
	  
	  columnDefs = [];
	  columns.forEach(function(col){
	  	columnDefs.push({id: 'col-'+col.id, name: col.name, field: col.id, width: colWidth, cssClass: col.id=='operation' ? "operation-cell-style" : "col-header-style", 
	  					resizable: true, editor: col.id=='operation' ? null : Slick.Editors.Text, validator: requiredFieldValidator} );
	  });

	return columnDefs;
};

var addOrderItems = function(columnData){
    var grid;
    var columnDefs = getColumnDefinition(columnData, itemGridTotalWidth);  
  	console.log('columns='+JSON.stringify(columnDefs));
  	
  	var dataView = new Slick.Data.DataView(); 
    grid = new Slick.Grid(".order-items-grid-area", dataView, columnDefs, gridInfo4OrderItems.options);
	console.log('gird created.');
    /*
	grid.setSelectionModel(new Slick.CellSelectionModel());
    grid.onAddNewRow.subscribe(function (e, args) {
      var item = args.item;
      grid.invalidateRow(data.length);
      data.push(item);
      grid.updateRowCount();
      grid.render();
    });
   */

    dataView.onRowCountChanged.subscribe(function (e, args) {
      grid.updateRowCount();
      grid.render();
    });

    dataView.onRowsChanged.subscribe(function (e, args) {
      grid.invalidateRows(args.rows);
      grid.render();
    });
    
    grid.onClick.subscribe(function(e,args){
	    console.log('e='+e+', args='+JSON.stringify(args));	    
	    if(args.cell== fnGetOpCellIndex() ){ // operation col
	    	var rowIdx = args.row;
	    	var oItem = dataView.getItem(rowIdx);
	    	dataView.deleteItem(oItem.id);
	    	console.log('removed row for id='+oItem.id);
	    }
	});
     
    dataView.setItems([]);    

	var $addItemsBtn = $step2Area.find('.add-items-btn');
	$addItemsBtn.unbind('click');
    $addItemsBtn.click(function(){
    	// var itemCount = dataView.getLength();
    	// dataView.beginUpdate();
    	// var newData = {id: 'id_'+itemCount,  name: "钢材", model:'yuan港', 'texture': '304', 
    			// spec: 88, location: '南京', amount: "10", operation: (i % 5 == 0)};
    	// if(itemCount<=0){
    		// dataView.setItems(newData);
    	// }else{
    		// dataView.addItem(newData);
    	// }     	    	
    	// dataView.endUpdate();
    	
    	// show right data
    	fnShowRightArea('dynamic-select-area');
    });
    
    gridInfo4OrderItems.dataView = dataView;
    
    var $addOneItemBtn = $step2Area.find('.add-one-item-btn');
    $addOneItemBtn.unbind('click');
    $addOneItemBtn.click(function(){
    	
    	// set column headers
    	if(gCategoryChanged){
			var newColumns = category_dynamic_properties;		 		
			 // insert before opetion column
			var cols = gridInfo4OrderItems.columns.concat(newColumns);
			var opCol = cols.splice(common_properties.length-1, 1);
			cols = cols.concat(opCol);
			console.log("---- new cols="+JSON.stringify(cols));
			
			var columnDefs = getColumnDefinition(cols, itemGridTotalWidth);
			  
			// set new columns
			grid.setColumns(columnDefs);
		}
				
		// gather filled data 
		var $fieldArea = $step2Area.find('.item-field-area');
		var itemsValObj = {};
		// var name = $fieldArea.find('.input.name').val();
		// var model = $fieldArea.find('.input.model').val();
		//...
		common_properties.forEach(function(prop){
			if(prop.id == 'operation'){
				itemsValObj[prop.id] = data4DelBtn;
			}else{
				itemsValObj[prop.id] = $fieldArea.find('.'+prop.id).val();
			}			
		});
		
		category_dynamic_properties.forEach(function(prop){
			var propIdStr = prop.id;
			var val = $fieldArea.find('.category-dynamic-prop.'+propIdStr).val();
			itemsValObj[propIdStr] = val;
			console.log('propId :'+propIdStr+', val: '+val);
		});		
		
		console.log("item values: "+JSON.stringify(itemsValObj));
		
		if(gCategoryChanged){
			itemsValObj.id = 0;
			dataView.setItems([itemsValObj]);
		}else{
			var rowCount = dataView.getLength();
			itemsValObj.id = rowCount;
			dataView.addItem(itemsValObj);
		}		
		
		gCategoryChanged = false;
	});
  
    return {"grid": grid, 'dataView': dataView};
};

// 
// var oGridInfo = addOrderItems();
// 
// var fnResetOrderItemGrid = function(){
	// var columnDefs = getColumnDefinition(gridInfo4OrderItems.columns, itemGridTotalWidth);
	// oGridInfo.grid.setColumns(columnDefs);
	// oGridInfo.dataView.setItems([]);
// };

var addVendorsGrid = function(){
	var vendorGridTotalWidth = 770;
	var colWidth = vendorGridTotalWidth/4;
	var vendorColumns = [
    {id: "name", name: "供应商", field: "name", width: colWidth, cssClass: "cell-title", resizable: true, 
    	editor: Slick.Editors.Text, validator: requiredFieldValidator},
    {id: "location", name: "地区", field: "location", width: colWidth, editor: Slick.Editors.Text, resizable: true},
    {id: "mainBiz", name: "主营业务", field: "mainBiz", width: colWidth, editor: Slick.Editors.Text, resizable: true},
    {id: "operation", name: "操作", field: "operation", width: colWidth, editor: null,  cssClass:'operation-cell-style', resizable: true}
    ];
  
	var vendorOptions = {
	    editable: false,
	    enableAddRow: true,
	    enableCellNavigation: false,
	    asyncEditorLoading: false,
	    autoEdit: false
	};
	   
	var vendorDataView = new Slick.Data.DataView({  }); 
	var vendorGrid = new Slick.Grid(".order-vendor-list", vendorDataView, vendorColumns, vendorOptions);
	/*vendorGrid.setSelectionModel(new Slick.CellSelectionModel());*/
 	
	vendorDataView.onRowCountChanged.subscribe(function (e, args) {
	  vendorGrid.updateRowCount();
	  vendorGrid.render();
	});
	
	vendorDataView.onRowsChanged.subscribe(function (e, args) {
	  vendorGrid.invalidateRows(args.rows);
	  vendorGrid.render();
	});
	
	vendorGrid.onClick.subscribe(function(e,args){
	    console.log('e='+e+', args='+JSON.stringify(args));	    
	    if(args.cell==3){ // operation col
	    	var rowIdx = args.row;
	    	var oItem = vendorDataView.getItem(rowIdx);
	    	vendorDataView.deleteItem(oItem.id);
	    	console.log('removed row for id='+oItem.id);
	    }
	});
	
	var $addVendorsBtn = $step2Area.find('.add-vendor-btn');
	$addVendorsBtn.unbind('click');
	$addVendorsBtn.click(function(){
		fnShowRightArea('vendor-select-area');
	});
	
	var $addOneVendorBtn = $step2Area.find('.add-one-vendor-btn');
	$addOneVendorBtn.unbind('click');
	$addOneVendorBtn.click(function(){   	 
		var selectedVendors = [];
		var $fieldArea = $step2Area.find('.vendor-select-area .vendor_list .one-vendor');		
		$fieldArea.each(function(idx, oneVendorDom){
			var $checkbox = $(oneVendorDom).find('input');
			if($checkbox.attr("checked")){
				var company_id = $checkbox.val();
				var name = $(oneVendorDom).find('label').text();
				var mainBiz = $checkbox.data('mainbiz');
				var location= $checkbox.data('location');	
				var itemsValObj = {
					'id': company_id,
					'name': name,
					'location': location,
					'mainBiz' : mainBiz,
					'operation': '删除'
				};		
				console.log("vendor info: "+JSON.stringify(itemsValObj));
				selectedVendors.push(itemsValObj);
			}
		});
		
		//vendorDataView.beginUpdate();
		vendorDataView.setItems(selectedVendors); // clear and set new rows
		//vendorDataView.endUpdate();
		
	});
};
  



//addVendorsGrid();


var fixedFields = ['category', 'name', 'model', 'quantity', 'madein', "memo"];
$('#new_order_item_category_id').unbind('change');
$('#new_order_item_category_id').bind('change', function(){
	// get dynamic ones for the selected category
	var categoryId = $(this).val();
	console.log(categoryId);
	
	
});











/*
$('.addExtProp').bind('click', function(event) {	
	// get current selected category
	var cate_id = 3;// $("input[type='radio', name='category']").val();
	if (!cate_id) {
	//	cate_id = $("input[type='radio', name='parent_category']").val();
	}

	console.log('category_id=' +cate_id);

	$.ajax({
		url : '/props_by_category', //Note the my_controller and action here, i.e. change accordingly
		type : 'get',
		data : {
			'category_id' : cate_id
		}
	}).done(function(data) {
		console.log(JSON.stringify(data));
		
		$('.addExtProp').unbind('click').addClass('disabled_link');
	}).fail(function(jqXHR, textStatus) {
		console.log("Request failed: " + JSON.stringify(textStatus));
	});
});


*/